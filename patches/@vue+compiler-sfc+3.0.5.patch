diff --git a/node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js b/node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js
index ec71ab8..2398200 100644
--- a/node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js
+++ b/node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js
@@ -76,13 +76,13 @@ const cssVarsPlugin = postcss__default.plugin('vue-scoped', opts => (root) => {
         }
     });
 });
-function genCssVarsCode(vars, bindings, id, isProd) {
+function genCssVarsCode(vars, id, isProd, bindings) {
     const varsExp = genCssVarsFromList(vars, id, isProd);
     const exp = CompilerDOM.createSimpleExpression(varsExp, false);
     const context = CompilerDOM.createTransformContext(CompilerDOM.createRoot([]), {
         prefixIdentifiers: true,
-        inline: true,
-        bindingMetadata: bindings
+        inline: !!bindings,
+        bindingMetadata: bindings || {}
     });
     const transformed = CompilerDOM.processExpression(exp, context);
     const transformedString = transformed.type === 4 /* SIMPLE_EXPRESSION */
@@ -98,9 +98,9 @@ function genCssVarsCode(vars, bindings, id, isProd) {
 }
 // <script setup> already gets the calls injected as part of the transform
 // this is only for single normal <script>
-function genNormalScriptCssVarsCode(cssVars, bindings, id, isProd) {
+function genNormalScriptCssVarsCode(cssVars, id, isProd) {
     return (`\nimport { ${CSS_VARS_HELPER} as _${CSS_VARS_HELPER} } from 'vue'\n` +
-        `const __injectCSSVars__ = () => {\n${genCssVarsCode(cssVars, bindings, id, isProd)}}\n` +
+        `const __injectCSSVars__ = () => {\n${genCssVarsCode(cssVars, id, isProd)}}\n` +
         `const __setup__ = __default__.setup\n` +
         `__default__.setup = __setup__\n` +
         `  ? (props, ctx) => { __injectCSSVars__();return __setup__(props, ctx) }\n` +
@@ -448,23 +448,19 @@ const transformAssetUrl = (node, context, options = defaultAssetUrlOptions) => {
                 return;
             }
             const url = parseUrl(attr.value.content);
-            if (options.base) {
-                // explicit base - directly rewrite the url into absolute url
-                // does not apply to absolute urls or urls that start with `@`
-                // since they are aliases
-                if (attr.value.content[0] !== '@' &&
-                    isRelativeUrl(attr.value.content)) {
-                    // Allow for full hostnames provided in options.base
-                    const base = parseUrl(options.base);
-                    const protocol = base.protocol || '';
-                    const host = base.host ? protocol + '//' + base.host : '';
-                    const basePath = base.path || '/';
-                    // when packaged in the browser, path will be using the posix-
-                    // only version provided by rollup-plugin-node-builtins.
-                    attr.value.content =
-                        host +
-                            (path__default.posix || path__default).join(basePath, url.path + (url.hash || ''));
-                }
+            if (options.base && attr.value.content[0] === '.') {
+                // explicit base - directly rewrite relative urls into absolute url
+                // to avoid generating extra imports
+                // Allow for full hostnames provided in options.base
+                const base = parseUrl(options.base);
+                const protocol = base.protocol || '';
+                const host = base.host ? protocol + '//' + base.host : '';
+                const basePath = base.path || '/';
+                // when packaged in the browser, path will be using the posix-
+                // only version provided by rollup-plugin-node-builtins.
+                attr.value.content =
+                    host +
+                        (path__default.posix || path__default).join(basePath, url.path + (url.hash || ''));
                 return;
             }
             // otherwise, transform the url into an import.
@@ -1252,7 +1248,7 @@ function compileScript(sfc, options) {
             if (needRewrite) {
                 content = rewriteDefault(content, `__default__`, plugins);
                 if (cssVars.length) {
-                    content += genNormalScriptCssVarsCode(cssVars, bindings, scopeId, !!options.isProd);
+                    content += genNormalScriptCssVarsCode(cssVars, scopeId, !!options.isProd);
                 }
                 if (hasInheritAttrsFlag) {
                     content += `__default__.inheritAttrs = false`;
@@ -1810,7 +1806,7 @@ function compileScript(sfc, options) {
     if (cssVars.length) {
         helperImports.add(CSS_VARS_HELPER);
         helperImports.add('unref');
-        s.prependRight(startOffset, `\n${genCssVarsCode(cssVars, bindingMetadata, scopeId, !!options.isProd)}\n`);
+        s.prependRight(startOffset, `\n${genCssVarsCode(cssVars, scopeId, !!options.isProd, bindingMetadata)}\n`);
     }
     // 9. finalize setup() argument signature
     let args = `__props`;
diff --git a/node_modules/@vue/compiler-sfc/dist/compiler-sfc.global.js b/node_modules/@vue/compiler-sfc/dist/compiler-sfc.global.js
index de68fc4..5e88916 100644
--- a/node_modules/@vue/compiler-sfc/dist/compiler-sfc.global.js
+++ b/node_modules/@vue/compiler-sfc/dist/compiler-sfc.global.js
@@ -24950,13 +24950,13 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
           }
       });
   });
-  function genCssVarsCode(vars, bindings, id, isProd) {
+  function genCssVarsCode(vars, id, isProd, bindings) {
       const varsExp = genCssVarsFromList(vars, id, isProd);
       const exp = createSimpleExpression(varsExp, false);
       const context = createTransformContext(createRoot([]), {
           prefixIdentifiers: true,
-          inline: true,
-          bindingMetadata: bindings
+          inline: !!bindings,
+          bindingMetadata: bindings || {}
       });
       const transformed = processExpression(exp, context);
       const transformedString = transformed.type === 4 /* SIMPLE_EXPRESSION */
@@ -24972,9 +24972,9 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
   }
   // <script setup> already gets the calls injected as part of the transform
   // this is only for single normal <script>
-  function genNormalScriptCssVarsCode(cssVars, bindings, id, isProd) {
+  function genNormalScriptCssVarsCode(cssVars, id, isProd) {
       return (`\nimport { ${CSS_VARS_HELPER} as _${CSS_VARS_HELPER} } from 'vue'\n` +
-          `const __injectCSSVars__ = () => {\n${genCssVarsCode(cssVars, bindings, id, isProd)}}\n` +
+          `const __injectCSSVars__ = () => {\n${genCssVarsCode(cssVars, id, isProd)}}\n` +
           `const __setup__ = __default__.setup\n` +
           `__default__.setup = __setup__\n` +
           `  ? (props, ctx) => { __injectCSSVars__();return __setup__(props, ctx) }\n` +
@@ -25322,23 +25322,19 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
                   return;
               }
               const url = parseUrl(attr.value.content);
-              if (options.base) {
-                  // explicit base - directly rewrite the url into absolute url
-                  // does not apply to absolute urls or urls that start with `@`
-                  // since they are aliases
-                  if (attr.value.content[0] !== '@' &&
-                      isRelativeUrl(attr.value.content)) {
-                      // Allow for full hostnames provided in options.base
-                      const base = parseUrl(options.base);
-                      const protocol = base.protocol || '';
-                      const host = base.host ? protocol + '//' + base.host : '';
-                      const basePath = base.path || '/';
-                      // when packaged in the browser, path will be using the posix-
-                      // only version provided by rollup-plugin-node-builtins.
-                      attr.value.content =
-                          host +
-                              (path__default.posix || path__default).join(basePath, url.path + (url.hash || ''));
-                  }
+              if (options.base && attr.value.content[0] === '.') {
+                  // explicit base - directly rewrite relative urls into absolute url
+                  // to avoid generating extra imports
+                  // Allow for full hostnames provided in options.base
+                  const base = parseUrl(options.base);
+                  const protocol = base.protocol || '';
+                  const host = base.host ? protocol + '//' + base.host : '';
+                  const basePath = base.path || '/';
+                  // when packaged in the browser, path will be using the posix-
+                  // only version provided by rollup-plugin-node-builtins.
+                  attr.value.content =
+                      host +
+                          (path__default.posix || path__default).join(basePath, url.path + (url.hash || ''));
                   return;
               }
               // otherwise, transform the url into an import.
@@ -31009,7 +31005,7 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
   var SourceMapConsumer$2 = sourceMap.SourceMapConsumer;
   var SourceMapGenerator$3 = sourceMap.SourceMapGenerator;
 
-  var mergeSourceMap = merge$1;
+  var C__Labs_vueNext_node_modules_mergeSourceMap = merge$1;
 
   /**
    * Merge old source map and new source map and return merged.
@@ -31087,7 +31083,7 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
           if (map) {
               return {
                   code: result.css.toString(),
-                  map: mergeSourceMap(map, JSON.parse(result.map.toString())),
+                  map: C__Labs_vueNext_node_modules_mergeSourceMap(map, JSON.parse(result.map.toString())),
                   errors: [],
                   dependencies
               };
@@ -31117,7 +31113,7 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
       if (map) {
           return {
               code: result.css.toString(),
-              map: mergeSourceMap(map, result.map),
+              map: C__Labs_vueNext_node_modules_mergeSourceMap(map, result.map),
               errors: [],
               dependencies: dependencies
           };
@@ -31141,7 +31137,7 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
           if (map) {
               return {
                   code: result,
-                  map: mergeSourceMap(map, ref.sourcemap),
+                  map: C__Labs_vueNext_node_modules_mergeSourceMap(map, ref.sourcemap),
                   errors: [],
                   dependencies
               };
@@ -34410,7 +34406,7 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
               if (needRewrite) {
                   content = rewriteDefault(content, `__default__`, plugins);
                   if (cssVars.length) {
-                      content += genNormalScriptCssVarsCode(cssVars, bindings, scopeId, !!options.isProd);
+                      content += genNormalScriptCssVarsCode(cssVars, scopeId, !!options.isProd);
                   }
                   if (hasInheritAttrsFlag) {
                       content += `__default__.inheritAttrs = false`;
@@ -34968,7 +34964,7 @@ var VueCompilerSFC = (function (exports, postcss, path, url, require$$0) {
       if (cssVars.length) {
           helperImports.add(CSS_VARS_HELPER);
           helperImports.add('unref');
-          s.prependRight(startOffset, `\n${genCssVarsCode(cssVars, bindingMetadata, scopeId, !!options.isProd)}\n`);
+          s.prependRight(startOffset, `\n${genCssVarsCode(cssVars, scopeId, !!options.isProd, bindingMetadata)}\n`);
       }
       // 9. finalize setup() argument signature
       let args = `__props`;
